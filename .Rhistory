z <- x[c("Date","TMAX","TMIN","Rain","RHUM_FUS")]
names(z) <- c("Date","TMAX","TMIN","RAIN","RHUM")
}
z
}
)
names(statData) <- namStat
lapply(statData,head)
lapply(statData,tail)
datosEstacion <- merge(data.frame(Stat=namStat),catagoloEstaciones[c("Code",
"Longitude","Latitude","Municipality","Departament")],by.x="Stat",
by.y="Code",all.x=T,all.y=F, sort=F)
datosEstacion <- datosEstacion[!duplicated(datosEstacion),]
#Completar estaciones  que tienen algunas variables faltantes
estacSinEsol <- datosEstacion[unlist(lapply(statData,ncol))==5,]
estacConEsol <- datosEstacion[unlist(lapply(statData,ncol))==6,]
estacSinEsol
estacConEsol
estacSinEsol
gd <- lapply(1:nrow(estacSinEsol),function(z)
{
cbind(
sapply(1:nrow(estacConEsol),
function(x){gdist(
lon.1= estacSinEsol$Longitude[z],
lat.1 =estacSinEsol$Latitude[z],
lon.2 = estacConEsol$Longitude[x],
lat.2 = estacConEsol$Latitude[x],
units = "m")
}
)
)
}
)
estacionesProx <-
data.frame(
StatSinEsol = estacSinEsol$Stat,
StatParRem =
estacConEsol[unlist(lapply(gd,function(x){which(x[,1]==min(x[,1]))})),]$Stat
)
estacionesProx
#Manualmente se ajustan estaciones
for(i in 1:nrow(estacionesProx))
{
estaciones <-  estacionesProx[i,]
statData[[as.character(as.matrix(estaciones[1]))]]$ESOL <-
statData[[as.character(as.matrix(estaciones[2]))]]$ESOL
}
names(statData) <- namStat
lapply(statData,head)
estacionesProx
datosEstacion
get.seed()
3149*48
3149*49
2500*49
load("//dapadfs/workspace_cluster_6/TRANSVERSAL_PROJECTS/MADR/COMPONENTE_2/OPEN_BIGDATA_AEPS/REGRESSION_MODELS/All-Functions-AEPS_BD.RData")
fix(descriptiveGraphics)
349*3200
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages("digest")
install.packages("digest")
library(digest)
library(devtools)$
library(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='hdorado-apps',
token='D37F60E954FFCDA6E19E57606F4283D8',
secret='o/7iLXifvQ2GAO+cn9Cw8iDPBRK6NhOAU3cRWn3H')
library(rsconnect)
install.packages("rsconnect")
devtools::install_github('rstudio/rsconnect')
library(ggplot2)
library(randomForest)
f733Saldania <-
#PRUEBA DE INVERSION DE RECUERSO DEL PROCESO DE ANALISIS
read.csv(
paste0("//dapadfs/workspace_cluster_6/TRANSVERSAL_PROJECTS/MADR/COMPONENTE_2/",
"FEDEARROZ/TOYSET_FEDEARROZ_PRUEBAS/NUEVOS_METHODOS_REGRESION/",
"F733Saldaña.csv"),row.names=1
)
tme <- theme_bw() +theme(legend.position="none")+
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x =  element_text(size = 12),
axis.text.y =  element_text(size = 12,angle = 90, hjust = 0.5))
lows <- with(f733Saldania,lowess(Yield~Temp_Max_Avg_VEG))
lowsMat <- data.frame(x=lows$x,y=lows$y)
ggplot(f733Saldania,aes(x=Temp_Max_Avg_VEG,y=Yield))+geom_point(colour="grey4",
fill="blue",size=4,shape = 21,alpha =0.6)+tme+
geom_line(aes(x=x,y=y),lwd=1.3,col="red", data=lowsMat)
rf <- randomForest(Yield~.,data=f733Saldania,varImportance=T,
mtry = round((ncol(f733Saldania)-1)/3), ntree=2000)
rfImportance    <- rf$importance
StdRfImportance <- rfImportance/sum(rfImportance)*100
StdRfImportance <- rfImportance/max(rfImportance)*100
StdRfImportance <- rfImportance/sum(rfImportance)*rf$rsq
fix(randomForest)
?R2
?r2
rf
rf(rf$rsq)
rf$test
rf$y
rf$call
rf$rsq
max(rf$rsq)
rf
rf <- randomForest(Yield~.,data=f733Saldania,varImportance=T,
mtry = round((ncol(f733Saldania)-1)/3), ntree=2000)
rf <- randomForest(Yield~.,data=f733Saldania,varImportance=T,
mtry = round((ncol(f733Saldania)-1)/3), ntree=2000)
f733Saldania <-
read.csv(
paste0("//dapadfs/workspace_cluster_6/TRANSVERSAL_PROJECTS/MADR/COMPONENTE_2/",
"FEDEARROZ/TOYSET_FEDEARROZ_PRUEBAS/NUEVOS_METHODOS_REGRESION/",
"F733Saldaña.csv"),row.names=1
)
tme <- theme_bw() +theme(legend.position="none")+
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x =  element_text(size = 12),
axis.text.y =  element_text(size = 12,angle = 90, hjust = 0.5))
lows <- with(f733Saldania,lowess(Yield~Temp_Max_Avg_VEG))
lowsMat <- data.frame(x=lows$x,y=lows$y)
ggplot(f733Saldania,aes(x=Temp_Max_Avg_VEG,y=Yield))+geom_point(colour="grey4",
fill="blue",size=4,shape = 21,alpha =0.6)+tme+
geom_line(aes(x=x,y=y),lwd=1.3,col="red", data=lowsMat)
rf <- randomForest(Yield~.,data=f733Saldania,varImportance=T,
mtry = round((ncol(f733Saldania)-1)/3), ntree=2000)
library(randomForest)
rf <- randomForest(Yield~.,data=f733Saldania,varImportance=T,
mtry = round((ncol(f733Saldania)-1)/3), ntree=2000)
round((ncol(f733Saldania)-1)/3)
rf <- randomForest(Yield~.,data=f733Saldania,varImportance=T,
)
f733Saldania
library(ggplot2)
library(randomForest)
#PRUEBA DE INVERSION DE RECUERSO DEL PROCESO DE ANALISIS
f733Saldania <-
read.csv(
paste0("//dapadfs/workspace_cluster_6/TRANSVERSAL_PROJECTS/MADR/COMPONENTE_2/",
"FEDEARROZ/TOYSET_FEDEARROZ_PRUEBAS/NUEVOS_METHODOS_REGRESION/",
"F733Saldaña.csv"),row.names=1
)
tme <- theme_bw() +theme(legend.position="none")+
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x =  element_text(size = 12),
axis.text.y =  element_text(size = 12,angle = 90, hjust = 0.5))
lows <- with(f733Saldania,lowess(Yield~Temp_Max_Avg_VEG))
lowsMat <- data.frame(x=lows$x,y=lows$y)
ggplot(f733Saldania,aes(x=Temp_Max_Avg_VEG,y=Yield))+geom_point(colour="grey4",
fill="blue",size=4,shape = 21,alpha =0.6)+tme+
geom_line(aes(x=x,y=y),lwd=1.3,col="red", data=lowsMat)
rf <- randomForest(Yield~.,data=f733Saldania,varImportance=T,
mtry = round((ncol(f733Saldania)-1)/3), ntree=2000)
rfImportance    <- rf$importance
rf
max(rf$rsq)
rf <- randomForest(Yield~.,data=f733Saldania,varImportance=T,
mtry = round((ncol(f733Saldania)-1)/3), ntree=2000)
max(rf$rsq)
rf
rf <- randomForest(Yield~.,data=f733Saldania,varImportance=T,
mtry = round((ncol(f733Saldania)-1)/3), ntree=2000)
max(rf$rsq)
rf
mean(rf$rsq)
randomForest:::print.randomForest
rf$rsq[length(rf$rsq)]
rf
rf$rsq[length(rf$rsq)]
rf$importance
StdRfImportance
rf$rsq[length(rf$rsq)]
rfImportance    <- rf$importance
rfImportance/sum(rfImportance)*100
rfImportance/sum(rfImportance)
StdRfImportance
StdRfImportance <- rf$rsq[length(rf$rsq)]
StdRfImportance
StdRfImportance <- rf$rsq[length(rf$rsq)]*100
StdRfImportance
StdRfImportance <- rfImportance/sum(rfImportance)*StdRfImportance
StdRfImportance
sum(StdRfImportance)
rfImportance/sum(rfImportance)*100
rfImportance/max(rfImportance)*100
rfImportance/sum(rfImportance)*StdRfImportance
data.frame(Var=row.names(rfImpotance),Imp=rfImpotance)
StdRfImportance
StdRfImportance <- rfImportance/sum(rfImportance)*100
#OPC 2
StdRfImportance <- rfImportance/max(rfImportance)*100
#OPC 3
StdRfImportance <- rfImportance/sum(rfImportance)*StdRfImportance
StdRfImportance
StdRfImportance
StdRfImportance
data.frame(Var=row.names(rfImpotance),Imp=StdRfImportance)
data.frame(Var=row.names(StdRfImportance),Imp=StdRfImportance)
Inportance <- data.frame(Var=row.names(StdRfImportance),Imp=StdRfImportance)
Importance <- data.frame(Var=row.names(StdRfImportance),Imp=StdRfImportance)
Importance
sort(Importance$IncNodePurity,decreasing=T)
Importance[order(Importance$IncNodePurity,decreasing=T),]
barplot(ImpotanceSort)
head(ImpotanceSort)
ImpotanceSort <- Importance[order(Importance$IncNodePurity,decreasing=T),]
head(ImpotanceSort)
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m + geom_boxplot(fill=col.grap)
m + geom_bar(stat="identity", width=0.5, fill="slategray1")
m + geom_bar(stat="identity", width=0.5, fill="slategray1") +
ylab("Mean importance")+ geom_errorbar(aes(ymax = lower,
ymin=upper), width=0.25,data=errBars) + coord_flip() + theme_bw()
m + geom_bar(stat="identity", width=0.5, fill="slategray1") +
ylab("Mean importance")+  coord_flip() + theme_bw()
ImpotanceSort$IncNodePurity
ImpotanceSort$Var
factor(ImpotanceSort$Var)
ImpotanceSort$Var <- factor(ImpotanceSort$Var,levels=ImpotanceSort$Var)
ImpotanceSort$Var
ImpotanceSort$Var <- factor(ImpotanceSort$Var,levels=ImpotanceSort$Var)
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m <- m + geom_bar(stat="identity", width=0.5, fill="slategray1") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
perf1, "%)")) +theme(plot.title = element_text(size = szmain,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = sztxty),
axis.text.x =element_text(size = sztxtx),
axis.title.x = element_text(size = szlbty),
axis.title.y = element_text(size = szlbtx))
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m <- m + geom_bar(stat="identity", width=0.5, fill="slategray1") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
StdRfImportance, "%)")) +theme(plot.title = element_text(size = szmain,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = sztxty),
axis.text.x =element_text(size = sztxtx),
axis.title.x = element_text(size = szlbty),
axis.title.y = element_text(size = szlbtx))
suppressWarnings(print(m))
m + geom_bar(stat="identity", width=0.5, fill="slategray1") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
StdRfImportance, "%)")) +theme(plot.title = element_text(size = szmain,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = sztxty),
axis.text.x =element_text(size = sztxtx),
axis.title.x = element_text(size = szlbty),
axis.title.y = element_text(size = szlbtx))
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m <- m + geom_bar(stat="identity", width=0.5, fill="slategray1") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
StdRfImportance, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
suppressWarnings(print(m))
Importance <- data.frame(Var=row.names(StdRfImportance),Imp=StdRfImportance)
ImpotanceSort <- Importance[order(Importance$IncNodePurity,decreasing=F),]
ImpotanceSort$Var <- factor(ImpotanceSort$Var,levels=ImpotanceSort$Var)
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m <- m + geom_bar(stat="identity", width=0.5, fill="slategray1") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
StdRfImportance, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
suppressWarnings(print(m))
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m <- m + geom_bar(stat="identity", width=0.5, fill="slategray1") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
round(StdRfImportance,2), "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
suppressWarnings(print(m))
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m <- m + geom_bar(stat="identity", width=0.5, fill="slategray1") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
round(StdRfImportance,4)*100, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
suppressWarnings(print(m))
m + geom_bar(stat="identity", width=0.5, fill="slategray1") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
round(StdRfImportance,4)*100, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
m + geom_bar(stat="identity", width=0.5, fill="slategray1",colour="black") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
round(StdRfImportance,4)*100, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
suppressWarnings(print(m))
m + geom_bar(stat="identity", width=0.5, fill="slategray1",colour="gray3") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
round(StdRfImportance,4)*100, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
suppressWarnings(print(m))
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m <- m + geom_bar(stat="identity", width=0.5, fill="slategray1",colour="gray3") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
round(StdRfImportance,4)*100, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
suppressWarnings(print(m))
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m <- m + geom_bar(stat="identity", width=0.5, fill="slategray1",colour="gray3") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
round(StdRfImportance,4)*100, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))+
geom_vline(xintercept = 0)
suppressWarnings(print(m))
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m <- m + geom_bar(stat="identity", width=0.5, fill="slategray1",colour="gray3") +
ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
round(StdRfImportance,4)*100, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))+
geom_vline(xintercept = 0:9)
m + geom_bar(stat="identity", width=0.5, fill="slategray1",colour="gray3") +
geom_vline(xintercept = 0:9)+ ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
round(StdRfImportance,4)*100, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
m <- ggplot(ImpotanceSort, aes(x=Var, y=IncNodePurity))
m <- m + geom_bar(stat="identity", width=0.5, fill="slategray1",colour="gray3") +
geom_hline(yintercept = 0)+ ylab("Mean importance")+  coord_flip() + theme_bw() +
ggtitle(paste("Importance of variables \n(with a mean R2 of",
round(StdRfImportance,4)*100, "%)")) +theme(plot.title = element_text(size = 12,
face = "bold", colour = "black", vjust = 1.5),
axis.text.y =element_text(size = 12),
axis.text.x =element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
suppressWarnings(print(m))
?partialPlot
head(ImpotanceSort)
rf
ImpotanceSort
ImpotanceSort[nrow(ImpotanceSort),][2]
partialPlot(rf,f733Saldania,ImpotanceSort[nrow(ImpotanceSort),][2])
ImpotanceSort[nrow(ImpotanceSort),][2]
partialPlot(rf,f733Saldania,ImpotanceSort[nrow(ImpotanceSort),][1])
ImpotanceSort[nrow(ImpotanceSort),][1]
ImpotanceSort[nrow(ImpotanceSort),][1]
partialPlot(rf,f733Saldania,Sol_Ener_Accu_RIP)
ImpotanceSort[nrow(ImpotanceSort),][1]
as.character(ImpotanceSort[nrow(ImpotanceSort),][1])
as.factor(ImpotanceSort[nrow(ImpotanceSort),][1])
as.character(as.matrix(ImpotanceSort[nrow(ImpotanceSort),][1]))
partialPlot(rf,f733Saldania,as.character(as.matrix(ImpotanceSort[nrow(ImpotanceSort),][1])))
var 1 <- as.character(as.matrix(ImpotanceSort[nrow(ImpotanceSort),][1]))
var_1 <- as.character(as.matrix(ImpotanceSort[nrow(ImpotanceSort),][1]))
partialPlot(rf,f733Saldania,var_1,var_1)
partialPlot(rf,f733Saldania,var_1)
partialPlot(rf,f733Saldania,var_1)
var_1
partialPlot(rf,f733Saldania,get(var_1))
partialPlot(rf,f733Saldania,"Sol_Ener_Accu_RIP")
partialPlot(rf,f733Saldania,as.character(as.matrix(ImpotanceSort[nrow(ImpotanceSort),][1])),"Sol_Ener_Accu_RIP")
partialPlot(rf,f733Saldania,as.character(as.matrix(ImpotanceSort[nrow(ImpotanceSort),][1])),xlab="Sol_Ener_Accu_RIP")
library(ggplot2)
library(tools)
shiny::runApp('D:/Tobackup/Documents/HELLOSHINY/App-RandomForest')
setwd("D:/Tobackup/Documents/HELLOSHINY/App-RandomForest")
shiny::runApp()
shiny::runApp()
source('D:/Tobackup/Documents/HELLOSHINY/App-RandomForest/sever.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyUI(
fluidPage(
fluidRow(
column(10,
titlePanel(strong("Exploratory analysis and variable importance
for multivariate data:")),
br(),
p("This aplication is for exploring random forest models with a
quantitative target; once the user has loaded a tidy database,
immediately can start to: explore the correlation between two
variables, identify the subset of relevants factor and reconoze
the dependences between input and output.")
)XzZX
)
)
)
shinyUI(
fluidPage(
fluidRow(
column(10,
titlePanel(strong("Exploratory analysis and variable importance
for multivariate data:")),
br(),
p("This aplication is for exploring random forest models with a
quantitative target; once the user has loaded a tidy database,
immediately can start to: explore the correlation between two
variables, identify the subset of relevants factor and reconoze
the dependences between input and output.")
)
)
)
)
library(ggplot2)
library(tools)
shinyServer(function(input,output){
})
shiny::runApp()
getwD()
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
103
10/3
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
